// java
public static int[] countingSort(int[] array) {
07.
// array to be sorted in, this array is necessary
08.
// when we sort object datatypes, if we don't,
09.
// we can sort directly into the input array    
10.
int[] aux = new int[array.length];
11.
 
12.
// find the smallest and the largest value
13.
int min = array[0];
14.
int max = array[0];
15.
for (int i = 1; i < array.length; i++) {
16.
if (array[i] < min) min = array[i];
17.
else if (array[i] > max) max = array[i];
18.
}
19.
 
20.
// init array of frequencies
21.
int[] counts = new int[max - min + 1];
22.
 
23.
// init the frequencies
24.
for (int i = 0;  i < array.length; i++) {
25.
counts[array[i] - min]++;
26.
}
27.
 
28.
// recalculate the array - create the array of occurences
29.
counts[0]--;
30.
for (int i = 1; i < counts.length; i++) {
31.
counts[i] = counts[i] + counts[i-1];
32.
}
33.
 
34.
// Sort the array right to the left
35.
// 1) look up in the array of occurences the last occurence of the given value
36.
// 2) place it into the sorted array
37.
// 3) decrement the index of the last occurence of the given value
38.
// 4) continue with the previous value of the input array (goto: 1), terminate if all values were already sorted
39.
for (int i = array.length - 1; i >= 0; i--) {
40.
aux[counts[array[i] - min]--] = array[i];
41.
}
42.
 
43.
return aux;
44.
}
/////////////////////////////////////////
// c#
public static int[] CountingSort(int[] array)
07.
{
08.
// array to be sorted in, this array is necessary
09.
// when we sort object datatypes, if we don't,
10.
// we can sort directly into the input array    
11.
int[] aux = new int[array.Length];
12.
 
13.
// find the smallest and the largest value
14.
int min = array[0];
15.
int max = array[0];
16.
for (int i = 1; i < array.Length; i++)
17.
{
18.
if (array[i] < min) min = array[i];
19.
else if (array[i] > max) max = array[i];
20.
}
21.
 
22.
// init array of frequencies
23.
int[] counts = new int[max - min + 1];
24.
 
25.
// init the frequencies
26.
for (int i = 0; i < array.Length; i++)
27.
{
28.
counts[array[i] - min]++;
29.
}
30.
 
31.
// recalculate the array - create the array of occurences
32.
counts[0]--;
33.
for (int i = 1; i < counts.Length; i++)
34.
{
35.
counts[i] = counts[i] + counts[i - 1];
36.
}
37.
 
38.
// Sort the array right to the left
39.
// 1) look up in the array of occurences the last occurence of the given value
40.
// 2) place it into the sorted array
41.
// 3) decrement the index of the last occurence of the given value
42.
// 4) continue with the previous value of the input array (goto: 1), terminate if all values were already sorted
43.
for (int i = array.Length - 1; i >= 0; i--)
44.
{
45.
aux[counts[array[i] - min]--] = array[i];
46.
}
47.
 
48.
return aux;
49.
}
//////////////////////////////////////
// c++
#include <iostream>

using namespace std;

const int INPUT_SIZE = 20;
const int BUCKET_K = 10;

void print(int *input)
{
    for ( int i = 0; i < INPUT_SIZE; i++ )
        cout << input[i] << " ";
    cout << endl;
}

void countingsort(int* input)
{
    int CountArr[BUCKET_K] = { 0 };

    for (int i=0;i<INPUT_SIZE;i++)
    {
        CountArr[input[i]]++;
    }

    int outputindex=0;
    for (int j=0;j<BUCKET_K;j++)
    {
        while (CountArr[j]--)
            input[outputindex++] = j;
    }

}

int main()
{
    int input[INPUT_SIZE] = { 2, 4, 6, 4, 7, 1, 4, 9, 5, 3, 7, 2, 2, 6, 9, 3, 7, 3, 4, 4 };

    cout << "Input: ";
    print(input);
    countingsort(input);
    cout << "Output: ";
    print(input);
    return 0;
}